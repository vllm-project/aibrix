/*
Copyright 2024 The Aibrix Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// StormServiceSpecApplyConfiguration represents a declarative configuration of the StormServiceSpec type for use
// with apply.
type StormServiceSpecApplyConfiguration struct {
	Replicas             *int32                                        `json:"replicas,omitempty"`
	Selector             *v1.LabelSelectorApplyConfiguration           `json:"selector,omitempty"`
	Stateful             *bool                                         `json:"stateful,omitempty"`
	Template             *RoleSetTemplateSpecApplyConfiguration        `json:"template,omitempty"`
	UpdateStrategy       *StormServiceUpdateStrategyApplyConfiguration `json:"updateStrategy,omitempty"`
	RevisionHistoryLimit *int32                                        `json:"revisionHistoryLimit,omitempty"`
	Paused               *bool                                         `json:"paused,omitempty"`
	DisruptionTolerance  *DisruptionToleranceApplyConfiguration        `json:"disruptionTolerance,omitempty"`
}

// StormServiceSpecApplyConfiguration constructs a declarative configuration of the StormServiceSpec type for use with
// apply.
func StormServiceSpec() *StormServiceSpecApplyConfiguration {
	return &StormServiceSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithReplicas(value int32) *StormServiceSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithSelector(value *v1.LabelSelectorApplyConfiguration) *StormServiceSpecApplyConfiguration {
	b.Selector = value
	return b
}

// WithStateful sets the Stateful field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stateful field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithStateful(value bool) *StormServiceSpecApplyConfiguration {
	b.Stateful = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithTemplate(value *RoleSetTemplateSpecApplyConfiguration) *StormServiceSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithUpdateStrategy(value *StormServiceUpdateStrategyApplyConfiguration) *StormServiceSpecApplyConfiguration {
	b.UpdateStrategy = value
	return b
}

// WithRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionHistoryLimit field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithRevisionHistoryLimit(value int32) *StormServiceSpecApplyConfiguration {
	b.RevisionHistoryLimit = &value
	return b
}

// WithPaused sets the Paused field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Paused field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithPaused(value bool) *StormServiceSpecApplyConfiguration {
	b.Paused = &value
	return b
}

// WithDisruptionTolerance sets the DisruptionTolerance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisruptionTolerance field is set to the value of the last call.
func (b *StormServiceSpecApplyConfiguration) WithDisruptionTolerance(value *DisruptionToleranceApplyConfiguration) *StormServiceSpecApplyConfiguration {
	b.DisruptionTolerance = value
	return b
}
