/*
Copyright 2024 The Aibrix Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	orchestrationv1alpha1 "github.com/vllm-project/aibrix/api/orchestration/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CanaryStatusApplyConfiguration represents a declarative configuration of the CanaryStatus type for use
// with apply.
type CanaryStatusApplyConfiguration struct {
	CurrentStep      *int32                             `json:"currentStep,omitempty"`
	PauseConditions  []PauseConditionApplyConfiguration `json:"pauseConditions,omitempty"`
	Phase            *orchestrationv1alpha1.CanaryPhase `json:"phase,omitempty"`
	RoleCanaryCounts map[string]int32                   `json:"roleCanaryCounts,omitempty"`
	TotalCanaryPods  *int32                             `json:"totalCanaryPods,omitempty"`
	AbortedAt        *v1.Time                           `json:"abortedAt,omitempty"`
	Message          *string                            `json:"message,omitempty"`
}

// CanaryStatusApplyConfiguration constructs a declarative configuration of the CanaryStatus type for use with
// apply.
func CanaryStatus() *CanaryStatusApplyConfiguration {
	return &CanaryStatusApplyConfiguration{}
}

// WithCurrentStep sets the CurrentStep field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentStep field is set to the value of the last call.
func (b *CanaryStatusApplyConfiguration) WithCurrentStep(value int32) *CanaryStatusApplyConfiguration {
	b.CurrentStep = &value
	return b
}

// WithPauseConditions adds the given value to the PauseConditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PauseConditions field.
func (b *CanaryStatusApplyConfiguration) WithPauseConditions(values ...*PauseConditionApplyConfiguration) *CanaryStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPauseConditions")
		}
		b.PauseConditions = append(b.PauseConditions, *values[i])
	}
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *CanaryStatusApplyConfiguration) WithPhase(value orchestrationv1alpha1.CanaryPhase) *CanaryStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithRoleCanaryCounts puts the entries into the RoleCanaryCounts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the RoleCanaryCounts field,
// overwriting an existing map entries in RoleCanaryCounts field with the same key.
func (b *CanaryStatusApplyConfiguration) WithRoleCanaryCounts(entries map[string]int32) *CanaryStatusApplyConfiguration {
	if b.RoleCanaryCounts == nil && len(entries) > 0 {
		b.RoleCanaryCounts = make(map[string]int32, len(entries))
	}
	for k, v := range entries {
		b.RoleCanaryCounts[k] = v
	}
	return b
}

// WithTotalCanaryPods sets the TotalCanaryPods field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalCanaryPods field is set to the value of the last call.
func (b *CanaryStatusApplyConfiguration) WithTotalCanaryPods(value int32) *CanaryStatusApplyConfiguration {
	b.TotalCanaryPods = &value
	return b
}

// WithAbortedAt sets the AbortedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AbortedAt field is set to the value of the last call.
func (b *CanaryStatusApplyConfiguration) WithAbortedAt(value v1.Time) *CanaryStatusApplyConfiguration {
	b.AbortedAt = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *CanaryStatusApplyConfiguration) WithMessage(value string) *CanaryStatusApplyConfiguration {
	b.Message = &value
	return b
}
