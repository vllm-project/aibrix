/*
Copyright 2024 The Aibrix Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubewharf/godel-scheduler-api/pkg/apis/scheduling/v1alpha1"
)

// GodelSchedulingStrategySpecApplyConfiguration represents a declarative configuration of the GodelSchedulingStrategySpec type for use
// with apply.
type GodelSchedulingStrategySpecApplyConfiguration struct {
	MinMember              *int32             `json:"minMember,omitempty"`
	PriorityClassName      *string            `json:"priorityClassName,omitempty"`
	ScheduleTimeoutSeconds *int32             `json:"scheduleTimeoutSeconds,omitempty"`
	Application            *string            `json:"application,omitempty"`
	Affinity               *v1alpha1.Affinity `json:"affinity,omitempty"`
}

// GodelSchedulingStrategySpecApplyConfiguration constructs a declarative configuration of the GodelSchedulingStrategySpec type for use with
// apply.
func GodelSchedulingStrategySpec() *GodelSchedulingStrategySpecApplyConfiguration {
	return &GodelSchedulingStrategySpecApplyConfiguration{}
}

// WithMinMember sets the MinMember field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinMember field is set to the value of the last call.
func (b *GodelSchedulingStrategySpecApplyConfiguration) WithMinMember(value int32) *GodelSchedulingStrategySpecApplyConfiguration {
	b.MinMember = &value
	return b
}

// WithPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PriorityClassName field is set to the value of the last call.
func (b *GodelSchedulingStrategySpecApplyConfiguration) WithPriorityClassName(value string) *GodelSchedulingStrategySpecApplyConfiguration {
	b.PriorityClassName = &value
	return b
}

// WithScheduleTimeoutSeconds sets the ScheduleTimeoutSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScheduleTimeoutSeconds field is set to the value of the last call.
func (b *GodelSchedulingStrategySpecApplyConfiguration) WithScheduleTimeoutSeconds(value int32) *GodelSchedulingStrategySpecApplyConfiguration {
	b.ScheduleTimeoutSeconds = &value
	return b
}

// WithApplication sets the Application field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Application field is set to the value of the last call.
func (b *GodelSchedulingStrategySpecApplyConfiguration) WithApplication(value string) *GodelSchedulingStrategySpecApplyConfiguration {
	b.Application = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *GodelSchedulingStrategySpecApplyConfiguration) WithAffinity(value v1alpha1.Affinity) *GodelSchedulingStrategySpecApplyConfiguration {
	b.Affinity = &value
	return b
}
