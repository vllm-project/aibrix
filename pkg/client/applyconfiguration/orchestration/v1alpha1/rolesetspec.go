/*
Copyright 2024 The Aibrix Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	orchestrationv1alpha1 "github.com/vllm-project/aibrix/api/orchestration/v1alpha1"
)

// RoleSetSpecApplyConfiguration represents a declarative configuration of the RoleSetSpec type for use
// with apply.
type RoleSetSpecApplyConfiguration struct {
	Roles              []RoleSpecApplyConfiguration                     `json:"roles,omitempty"`
	UpdateStrategy     *orchestrationv1alpha1.RoleSetUpdateStrategyType `json:"updateStrategy,omitempty"`
	SchedulingStrategy *SchedulingStrategyApplyConfiguration            `json:"schedulingStrategy,omitempty"`
}

// RoleSetSpecApplyConfiguration constructs a declarative configuration of the RoleSetSpec type for use with
// apply.
func RoleSetSpec() *RoleSetSpecApplyConfiguration {
	return &RoleSetSpecApplyConfiguration{}
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *RoleSetSpecApplyConfiguration) WithRoles(values ...*RoleSpecApplyConfiguration) *RoleSetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *RoleSetSpecApplyConfiguration) WithUpdateStrategy(value orchestrationv1alpha1.RoleSetUpdateStrategyType) *RoleSetSpecApplyConfiguration {
	b.UpdateStrategy = &value
	return b
}

// WithSchedulingStrategy sets the SchedulingStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulingStrategy field is set to the value of the last call.
func (b *RoleSetSpecApplyConfiguration) WithSchedulingStrategy(value *SchedulingStrategyApplyConfiguration) *RoleSetSpecApplyConfiguration {
	b.SchedulingStrategy = value
	return b
}
