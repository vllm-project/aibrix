name: Release Build and Push

on:
  workflow_dispatch:  # Allows manual trigger
  push:
    tags:
      - "v*.*.*"  # This triggers the workflow on any new tag

jobs:
  image-release-dockerhub:
    runs-on: ubuntu-latest
    needs: [cut-github-release]
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        component:
          - name: controller-manager
            file: build/container/Dockerfile
          - name: gateway-plugins
            file: build/container/Dockerfile.gateway
          - name: metadata-service
            file: build/container/Dockerfile.metadata
          - name: runtime
            file: build/container/Dockerfile.runtime
          - name: kvcache-watcher
            file: build/container/Dockerfile.kvcache
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build and push ${{ matrix.component.name }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          file: ${{ matrix.component.file }}
          push: true
          tags: |
            aibrix/${{ matrix.component.name }}:${{ github.ref_name }}

  image-release-ghcr:
    runs-on: ubuntu-latest
    needs: [cut-github-release]
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        component:
          - name: controller-manager
            file: build/container/Dockerfile
          - name: gateway-plugins
            file: build/container/Dockerfile.gateway
          - name: metadata-service
            file: build/container/Dockerfile.metadata
          - name: runtime
            file: build/container/Dockerfile.runtime
          - name: kvcache-watcher
            file: build/container/Dockerfile.kvcache
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Login to Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.AIBRIX_ORG_PACKAGE_UPDATE_GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build and push ${{ matrix.component.name }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          file: ${{ matrix.component.file }}
          push: true
          tags: |
            ghcr.io/aibrix/${{ matrix.component.name }}:${{ github.ref_name }}

  python-wheel-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    name: publish
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python environment ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: |
          cd python/aibrix
          python -m pip install --upgrade pip
          pip install -U pip poetry build
      - name: Build and publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          pushd python/aibrix
          poetry publish --build
          popd
      - name: Add package to release artifact
        run: |
          pushd python/aibrix
          poetry build
          ls -al dist/*
          popd
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aibrix-python-packages-${{ matrix.python-version }}
          path: |
            python/aibrix/dist/*.whl

  kvcache-wheel-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    environment:
      name: pypi
      url: https://pypi.org/p/aibrix_kvcache
    permissions:
      id-token: write
    name: publish
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python environment ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          cd python/aibrix_kvcache
          python -m pip install --upgrade pip
          pip install -U pip cibuildwheel
          pip install -r requirements/build.txt
      - name: Build
        run: |
          python -m cibuildwheel --output-dir python/aibrix_kvcache/dist python/aibrix_kvcache/
          ls -al python/aibrix_kvcache/dist/*
      - name: Upload release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: python/aibrix_kvcache/dist
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aibrix-kvcache-python-packages
          path: |
            python/aibrix_kvcache/dist/*.whl

  artifact-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Kustomize
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /usr/local/bin/

      # Build Kustomize package
      - name: Build Kustomize
        run: |
          kustomize build config/dependency > aibrix-dependency-${{ github.ref_name }}.yaml
          kustomize build config/overlays/release > aibrix-core-${{ github.ref_name }}.yaml

      # Upload the Kustomize YAML as a release artifact
      - name: Upload Kustomize YAML
        uses: actions/upload-artifact@v4
        with:
          name: aibrix-dependency-${{ github.ref_name }}.yaml
          path: aibrix-dependency-${{ github.ref_name }}.yaml

      - name: Upload Kustomize YAML
        uses: actions/upload-artifact@v4
        with:
          name: aibrix-core-${{ github.ref_name }}.yaml
          path: aibrix-core-${{ github.ref_name }}.yaml

  cut-github-release:
    runs-on: ubuntu-latest
    needs: [python-wheel-release, artifact-release]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Download the Kustomize artifact from the previous job
      - name: Download Kustomize YAML
        uses: actions/download-artifact@v4
        with:
          name: aibrix-dependency-${{ github.ref_name }}.yaml

      - name: Download Kustomize YAML
        uses: actions/download-artifact@v4
        with:
          name: aibrix-core-${{ github.ref_name }}.yaml

      # Determine if this is a prerelease based on the tag name
      # if it contains
      - name: Set prerelease flag
        id: prerelease_check
        run: |
          if [[ "${{ github.ref_name }}" == *"rc"* ]]; then
            echo "This is a prerelease"
            echo "prerelease=true" >> $GITHUB_ENV
          else
            echo "This is not a prerelease"
            echo "prerelease=false" >> $GITHUB_ENV
          fi

      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}  # Use the tag that triggered the workflow
          name: ${{ github.ref_name }}  # The name of the release
          body: |
            Automatically generated release for tag ${{ github.ref_name }}.
          draft: true # let's always check the release before officially published.
          prerelease: ${{ env.prerelease }}
          files: |
            aibrix-dependency-${{ github.ref_name }}.yaml
            aibrix-core-${{ github.ref_name }}.yaml
