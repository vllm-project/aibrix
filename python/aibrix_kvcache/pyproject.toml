[project]
name = "aibrix-kvcache"
description = "AIBrix KV Cache offloading framework for cross-engine KV reuse"
authors = [{name = "AIBrix Team"}]
license = "Apache-2.0"
license-files = ["LICENSE"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dynamic = [ "version", "dependencies", "optional-dependencies"]

[build-system]
# Should be mirrored in requirements/build.txt
requires = [
    "build",
    "cmake>=3.26.1",
    "ninja",
    "packaging>=24.2",
    "setuptools>=77.0.3,<80.0.0",
    "setuptools-scm>=8.0",
    "torch == 2.7.0",
    "wheel",
    "jinja2",
    "regex",
    "numpy>=1.26.4",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["aibrix_kvcache*"]

[tool.ruff]
# Allow lines to be as long as 80.
line-length = 80

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I"]
extend-select = ["E501"]
ignore = [
    # star imports
    "F405", "F403",
    # lambda expression assignment
    "E731",
    # Loop control variable not used within loop body
    "B007",
    # f-string format
    "UP032",
    # Can remove once 3.10+ is the minimum Python version
    "UP007",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.codespell]
ignore-words-list = "dout, te, indicies, subtile, ElementE"

[tool.cibuildwheel]
# Explicitly specify Python 3.11 and 3.12 for manylinux x86_64
build = "cp31[12]-manylinux_x86_64"

# CUDA arch list https://developer.nvidia.com/cuda-gpus
environment = {TORCH_CUDA_ARCH_LIST = "7.0;7.5;8.0;8.6;8.9;9.0;10.0"}

# Use PyTorch manylinux image for building (cuda 12.8, torch 2.7)
manylinux-x86_64-image = "docker.io/pytorch/manylinux2_28-builder:cuda12.8"

[tool.cibuildwheel.linux]
repair-wheel-command = """
auditwheel repair \
  --plat manylinux_2_28_x86_64 \
  --exclude libtorch.so \
  --exclude libcudart.so.12 \
  --exclude libcuda.so.1 \
  --exclude libtorch_cuda.so \
  --exclude libtorch_cpu.so \
  --exclude libc10_cuda.so \
  --exclude libc10.so \
  -w {dest_dir} {wheel}
"""
