{{- if and (eq .Values.engine.type "sglang") (eq .Values.deployment.type "disaggregated") }}
apiVersion: orchestration.aibrix.ai/v1alpha1
kind: StormService
metadata:
  name: {{ include "aibrix-model.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "aibrix-model.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.stormReplicas }}
  updateStrategy:
    type: InPlaceUpdate
  stateful: true
  selector:
    matchLabels:
      {{- include "aibrix-model.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "aibrix-model.selectorLabels" . | nindent 8 }}
    spec:
      roles:
        {{- if .Values.router.enabled }}
        - name: routing
          replicas: 1
          stateful: true
          template:
            spec:
              containers:
                - name: mini-lb
                  image: {{ include "aibrix-model.routerImage" . }}
                  command: ["sh", "-c"]
                  args:
                    - |
                      python3 -m sglang_router.launch_router \
                        --pd-disaggregation \
                        --host 0.0.0.0 \
                        --policy {{ .Values.router.policy }} \
                        --service-discovery \
                        --service-discovery-port 30000 \
                        --prefill-selector storm-service-name=$STORM_SERVICE_NAME role-name=prefill \
                        --decode-selector storm-service-name=$STORM_SERVICE_NAME role-name=decode \
                        --service-discovery-namespace {{ .Release.Namespace }}
        {{- end }}
        - name: prefill
          replicas: {{ .Values.workers.prefill.replicas }}
          stateful: true
          template:
            metadata:
              {{- if .Values.network.rdma.enabled }}
              annotations:
                {{- include "aibrix-model.rdmaAnnotation" . | nindent 16 }}
              {{- end }}
            spec:
              {{- if .Values.network.hostNetwork }}
              hostNetwork: true
              {{- end }}
              containers:
                - name: prefill
                  image: {{ include "aibrix-model.engineImage" . }}
                  command: ["sh", "-c"]
                  args:
                    - |
                      python3 -m sglang.launch_server \
                        --model-path {{ .Values.model.path }} \
                        --served-model-name {{ .Values.model.name }} \
                        --host 0.0.0.0 \
                        --port 30000 \
                        --disaggregation-mode prefill \
                        --disaggregation-transfer-backend=mooncake \
                        --trust-remote-code \
                        --enable-metrics \
                        --mem-fraction-static 0.8 \
                        --log-level debug
                  env:
                    {{- include "aibrix-model.envVars" . | nindent 20 }}
                  volumeMounts:
                    - name: model-vol
                      mountPath: /models
                      readOnly: true
                    {{- if .Values.resources.memory.sharedMemory }}
                    - mountPath: /dev/shm
                      name: shared-mem
                    {{- end }}
                  resources:
                    {{- include "aibrix-model.resources" . | nindent 20 }}
                  securityContext:
                    {{- if .Values.security.privileged }}
                    privileged: true
                    {{- else }}
                    capabilities:
                      add:
                        {{- range .Values.security.capabilities }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
              volumes:
                - name: model-vol
                  hostPath:
                    path: {{ .Values.volumes.models.hostPath }}
                    type: Directory
                {{- if .Values.resources.memory.sharedMemory }}
                - emptyDir:
                    medium: Memory
                  name: shared-mem
                {{- end }}
        - name: decode
          replicas: {{ .Values.workers.decode.replicas }}
          stateful: true
          template:
            metadata:
              {{- if .Values.network.rdma.enabled }}
              annotations:
                {{- include "aibrix-model.rdmaAnnotation" . | nindent 16 }}
              {{- end }}
            spec:
              {{- if .Values.network.hostNetwork }}
              hostNetwork: true
              {{- end }}
              containers:
                - name: decode
                  image: {{ include "aibrix-model.engineImage" . }}
                  command: ["sh", "-c"]
                  args:
                    - |
                      python3 -m sglang.launch_server \
                        --model-path {{ .Values.model.path }} \
                        --served-model-name {{ .Values.model.name }} \
                        --host 0.0.0.0 \
                        --port 30000 \
                        --disaggregation-mode decode \
                        --disaggregation-transfer-backend=mooncake \
                        --trust-remote-code \
                        --enable-metrics \
                        --mem-fraction-static 0.8 \
                        --log-level debug
                  env:
                    {{- include "aibrix-model.envVars" . | nindent 20 }}
                  volumeMounts:
                    - name: model-vol
                      mountPath: /models
                      readOnly: true
                    {{- if .Values.resources.memory.sharedMemory }}
                    - mountPath: /dev/shm
                      name: shared-mem
                    {{- end }}
                  resources:
                    {{- include "aibrix-model.resources" . | nindent 20 }}
                  securityContext:
                    {{- if .Values.security.privileged }}
                    privileged: true
                    {{- else }}
                    capabilities:
                      add:
                        {{- range .Values.security.capabilities }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
              volumes:
                - name: model-vol
                  hostPath:
                    path: {{ .Values.volumes.models.hostPath }}
                    type: Directory
                {{- if .Values.resources.memory.sharedMemory }}
                - emptyDir:
                    medium: Memory
                  name: shared-mem
                {{- end }}
{{- end }}